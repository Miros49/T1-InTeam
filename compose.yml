services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "root"
      RABBITMQ_DEFAULT_PASS: "toor"
    networks:
      - broker_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 10s
      retries: 3

  broker_service:
    build:
      context: ./broker
      dockerfile: Dockerfile
    container_name: broker_service
    ports:
      - "1234:1234"
    depends_on:
      rabbitmq:
        condition: service_healthy
    privileged: true
    networks:
      - broker_network

  pinger:
    build:
      context: ./pinger
      dockerfile: Dockerfile
    container_name: pinger
    ports:
      - "6767:6767"
    depends_on:
      rabbitmq:
        condition: service_healthy # если настроен healthcheck
      broker_service:
        condition: service_started # дефолт
    privileged: true
    # переменные локального окружения
    environment:
      INTERVAL: 10 # секунд
      INPUT_DATABASE_URL: postgresql://postgres:postgres@host.docker.internal:5432/monitor # юрл таблички отслеживаемыми вебсайтами
    networks:
      - broker_network

  llm_service:
      build:
        context: ./LLM_service
        dockerfile: Dockerfile
      container_name: llm_service
      ports:
        - "6868:6868"
      depends_on:
        rabbitmq:
          condition: service_healthy # если настроен healthcheck
        broker_service:
          condition: service_started # дефолт
      privileged: true
      environment:
        USE_SKIP_NOTIFICATION: 0 # если хотим чтоб ллм уведомления приходили по всем статусам после пингера
      networks:
        - broker_network

  tg_service:
    build:
      context: ./notifier-service/tg-bot
      dockerfile: Dockerfile
    container_name: tg_service
    ports:
      - "6966:6966"
    depends_on:
      rabbitmq:
        condition: service_healthy # если настроен healthcheck
      broker_service:
        condition: service_started # дефолт
    privileged: true
    environment:
      # Telegram
      TG_TOKEN: 8368944259:AAHj-ivSsU-6GVV7nG4Ai1KFpNT6tKzIemM
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      # Logging
      LOG_LEVEL: INFO
    networks:
      - broker_network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
       - "6379:6379"
    networks:
      - broker_network

  example_service:
    build:
      context: ./example
      dockerfile: Dockerfile
    container_name: example_service
    ports:
      - "6969:6969"
    depends_on:
      rabbitmq:
        condition: service_healthy # если настроен healthcheck
      broker_service:
        condition: service_started # дефолт
    privileged: true
    networks:
      - broker_network

networks:
  broker_network:
    driver: bridge
    external: true

  

