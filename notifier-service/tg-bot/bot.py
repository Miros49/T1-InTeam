import asyncio
import logging
from aiogram.types import BotCommand
from pydantic import BaseModel

from core.config import dp, bot, setup_logging
from handlers import router as user_handlers
from utils import subscriptions

from broker import broker, app, llm_exchange
from faststream.rabbit import RabbitQueue

logger = logging.getLogger(__name__)


# Pydantic –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
class AlertMessage(BaseModel):
    id: int
    url: str
    name: str
    com: dict
    logs: dict
    explanation: str | None = None


@broker.subscriber(
    RabbitQueue("llm-to-tg-queue", durable=True, routing_key="llm.group"),
    llm_exchange,
)
async def handle_alert(message: AlertMessage):
    logger.info(f"[x] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è TG: {message.url}")

    try:
        tg_flag = message.com.get("tg")

        try:
            tg_flag = int(tg_flag)
        except (TypeError, ValueError):
            tg_flag = 0

        if tg_flag != 1:
            logger.info(f"[‚Üí] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {message.url} –ø—Ä–æ–ø—É—â–µ–Ω–æ (com.tg != 1)")
            return


        logs = message.logs or {}

        # –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ logs
        traffic_light = logs.get("traffic_light")
        http_status = logs.get("http_status")
        latency_ms = logs.get("latency_ms")
        ping_ms = logs.get("ping_ms")
        ssl_days_left = logs.get("ssl_days_left")
        dns_resolved = logs.get("dns_resolved")
        redirects = logs.get("redirects")
        errors_last = logs.get("errors_last")

        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        icon_map = {"green": "‚úÖ", "orange": "üü†", "red": "‚ùå"}
        status_icon = icon_map.get(traffic_light, "‚ùî")

        # –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            f"<b>{message.name}</b> ({message.url})\n"
            f"{status_icon} –°–≤–µ—Ç–æ—Ñ–æ—Ä: {traffic_light.upper()}\n\n"
            f"üïí –í—Ä–µ–º—è: {logs.get('timestamp')}\n"
            f"üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {http_status}\n"
            f"‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞ HTTP: {latency_ms} –º—Å\n"
            f"üì∂ –ü–∏–Ω–≥: {ping_ms} –º—Å\n"
            f"üîê SSL –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {ssl_days_left}\n"
            f"üåê DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥: {'OK' if dns_resolved else 'FAIL'}\n"
            f"‚Ü™Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç—ã: {redirects}\n"
            f"‚ùó –û—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏): {errors_last}\n"
        )

        # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        chat_ids = await subscriptions.get_all()
        logger.info("Broadcast to %d subscribers", len(chat_ids))
        if not chat_ids:
            logger.info("No subscribers found. Skipping send.")
            return

        for cid in chat_ids:
            try:
                await bot.send_message(cid, stats_text, parse_mode="HTML")

                if message.explanation:
                    await bot.send_message(cid, message.explanation, parse_mode="HTML")

            except Exception as e:
                logger.exception("Send failed to chat_id=%s: %s", cid, e)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)



async def main() -> None:
    setup_logging()

    dp.include_router(user_handlers)

    # –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=False)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="stop", description="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        BotCommand(command="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
    ])

    logger.info("Start polling")

    # –∑–∞–ø—É—Å–∫–∞–µ–º aiogram –∏ FastStream –≤–º–µ—Å—Ç–µ
    await asyncio.gather(
        dp.start_polling(bot),
        app.run(),   # FastStream
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Polling stopped")
