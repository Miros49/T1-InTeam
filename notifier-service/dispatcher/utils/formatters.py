from __future__ import annotations

import html
from datetime import datetime

from database.models import Site

from ..models import DispatchMessage

_ICON_MAP = {"green": "‚úÖ", "orange": "üü†", "red": "‚ùå"}


def format_telegram(message: DispatchMessage, site: Site) -> str:
    """Compose Telegram message using monitoring snapshot and optional explanation."""
    ctx = _build_context(message, site)
    stats_text = (
        f"<b>{ctx['name']}</b> ({ctx['url']})\n"
        f"{ctx['icon']} –°–≤–µ—Ç–æ—Ñ–æ—Ä: {ctx['traffic_light']}\n\n"
        f"üïí –í—Ä–µ–º—è: {ctx['timestamp']}\n"
        f"üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {ctx['http_status']}\n"
        f"‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞ HTTP: {ctx['latency_ms']} –º—Å\n"
        f"üì∂ –ü–∏–Ω–≥: {ctx['ping_ms']} –º—Å\n"
        f"üîê SSL –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {ctx['ssl_days_left']}\n"
        f"üåê DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥: {ctx['dns_resolved']}\n"
        f"‚Ü™Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç—ã: {ctx['redirects']}\n"
        f"‚ùó –û—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏): {ctx['errors_last']}\n"
    )

    if ctx["explanation"]:
        stats_text += f"\nüí¨ <b>–í–µ—Ä–¥–∏–∫—Ç LLM</b>\n{ctx['explanation']}"

    return stats_text


def format_email_subject(message: DispatchMessage, site: Site) -> str:
    ctx = _build_context(message, site)
    return f"[{ctx['traffic_light']}] {ctx['name']} ‚Äî —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω"


def format_email_bodies(message: DispatchMessage, site: Site) -> tuple[str, str]:
    ctx = _build_context(message, site)

    plain_lines = [
        f"{ctx['name']} ({ctx['url']})",
        f"–°–≤–µ—Ç–æ—Ñ–æ—Ä: {ctx['traffic_light']}",
        "",
        f"–í—Ä–µ–º—è: {ctx['timestamp']}",
        f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {ctx['http_status']}",
        f"–ó–∞–¥–µ—Ä–∂–∫–∞ HTTP: {ctx['latency_ms']} –º—Å",
        f"–ü–∏–Ω–≥: {ctx['ping_ms']} –º—Å",
        f"SSL –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {ctx['ssl_days_left']}",
        f"DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥: {ctx['dns_resolved']}",
        f"–†–µ–¥–∏—Ä–µ–∫—Ç—ã: {ctx['redirects']}",
        f"–û—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏): {ctx['errors_last']}",
    ]

    if ctx["explanation"]:
        plain_lines.extend(["", "–í–µ—Ä–¥–∏–∫—Ç LLM:", ctx["explanation_plain"]])

    plain_text = "\n".join(plain_lines)

    html_lines = [
        "<html><body>",
        f"<h3>{html.escape(ctx['name'])} ({html.escape(ctx['url'])})</h3>",
        f"<p><strong>–°–≤–µ—Ç–æ—Ñ–æ—Ä:</strong> {html.escape(ctx['traffic_light'])}</p>",
        "<table style='border-collapse: collapse;'>",
        _html_row("–í—Ä–µ–º—è", ctx['timestamp']),
        _html_row("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞", ctx['http_status']),
        _html_row("–ó–∞–¥–µ—Ä–∂–∫–∞ HTTP", f"{ctx['latency_ms']} –º—Å"),
        _html_row("–ü–∏–Ω–≥", f"{ctx['ping_ms']} –º—Å"),
        _html_row("SSL –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å", ctx['ssl_days_left']),
        _html_row("DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥", ctx['dns_resolved']),
        _html_row("–†–µ–¥–∏—Ä–µ–∫—Ç—ã", ctx['redirects']),
        _html_row("–û—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)", ctx['errors_last']),
        "</table>",
    ]

    if ctx["explanation"]:
        html_lines.append("<p><strong>–í–µ—Ä–¥–∏–∫—Ç LLM:</strong><br>" + html.escape(ctx["explanation"]) + "</p>")

    html_lines.append("</body></html>")
    html_text = "".join(html_lines)

    return plain_text, html_text


def _build_context(message: DispatchMessage, site: Site) -> dict[str, str]:
    logs = message.logs

    traffic_light = (logs.traffic_light or "unknown").lower()
    icon = _ICON_MAP.get(traffic_light, "‚ùî")

    timestamp_value = logs.timestamp
    if isinstance(timestamp_value, datetime):
        timestamp_text = timestamp_value.isoformat()
    elif isinstance(timestamp_value, str):
        timestamp_text = timestamp_value
    else:
        timestamp_text = "‚Äî"

    def _fmt(value) -> str:
        return "‚Äî" if value is None else str(value)

    dns_resolved = logs.dns_resolved
    dns_text = "‚Äî" if dns_resolved is None else ("OK" if dns_resolved else "FAIL")

    explanation = (message.explanation or "").strip()

    return {
        "name": message.name or site.name,
        "url": message.url or site.url,
        "traffic_light": traffic_light.upper(),
        "icon": icon,
        "timestamp": timestamp_text,
        "http_status": _fmt(logs.http_status),
        "latency_ms": _fmt(logs.latency_ms),
        "ping_ms": _fmt(logs.ping_ms),
        "ssl_days_left": _fmt(logs.ssl_days_left),
        "dns_resolved": dns_text,
        "redirects": _fmt(logs.redirects),
        "errors_last": _fmt(logs.errors_last),
        "explanation": explanation,
        "explanation_plain": explanation,
    }


def _html_row(label: str, value: str) -> str:
    return (
        "<tr>"
        f"<td style='padding:4px 8px;border:1px solid #ddd;'><strong>{html.escape(label)}</strong></td>"
        f"<td style='padding:4px 8px;border:1px solid #ddd;'>{html.escape(str(value))}</td>"
        "</tr>"
    )
