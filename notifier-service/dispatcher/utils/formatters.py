from __future__ import annotations

from datetime import datetime

from database.models import Site

from ..models import DispatchMessage

_ICON_MAP = {"green": "‚úÖ", "orange": "üü†", "red": "‚ùå"}


def format_telegram(message: DispatchMessage, site: Site) -> str:
    """Compose Telegram message using monitoring snapshot and optional explanation."""
    logs = message.logs

    traffic_light = (logs.traffic_light or "unknown").lower()
    status_icon = _ICON_MAP.get(traffic_light, "‚ùî")

    timestamp_value = logs.timestamp
    if isinstance(timestamp_value, datetime):
        timestamp_text = timestamp_value.isoformat()
    elif isinstance(timestamp_value, str):
        timestamp_text = timestamp_value
    else:
        timestamp_text = "‚Äî"

    http_status = _format_value(logs.http_status)
    latency_ms = _format_value(logs.latency_ms)
    ping_ms = _format_value(logs.ping_ms)
    ssl_days_left = _format_value(logs.ssl_days_left)
    dns_resolved = logs.dns_resolved
    if dns_resolved is None:
        dns_text = "‚Äî"
    else:
        dns_text = "OK" if dns_resolved else "FAIL"
    redirects = _format_value(logs.redirects)
    errors_last = _format_value(logs.errors_last)

    name = message.name or site.name
    url = message.url or site.url

    stats_text = (
        f"<b>{name}</b> ({url})\n"
        f"{status_icon} –°–≤–µ—Ç–æ—Ñ–æ—Ä: {traffic_light.upper()}\n\n"
        f"üïí –í—Ä–µ–º—è: {timestamp_text}\n"
        f"üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {http_status}\n"
        f"‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞ HTTP: {latency_ms} –º—Å\n"
        f"üì∂ –ü–∏–Ω–≥: {ping_ms} –º—Å\n"
        f"üîê SSL –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {ssl_days_left}\n"
        f"üåê DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥: {dns_text}\n"
        f"‚Ü™Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç—ã: {redirects}\n"
        f"‚ùó –û—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏): {errors_last}\n"
    )

    explanation = (message.explanation or "").strip()
    if explanation:
        stats_text += f"\nüí¨ <b>–í–µ—Ä–¥–∏–∫—Ç LLM</b>\n{explanation}"

    return stats_text


def _format_value(value) -> str:
    if value is None:
        return "‚Äî"
    return str(value)
